/**
 * Enhanced Performance Portfolio Gallery Component - Issue #49 Implementation
 * 
 * Features:
 * - Band vs Solo performance differentiation
 * - Integrated video players with optimal controls
 * - Audio/Video preview functionality (30-second samples)
 * - Testimonials throughout portfolio
 * - Genre versatility showcase
 * - Mobile-optimized viewing experience
 * - Professional event photography presentation
 * - Performance categories and filtering
 * - SEO schema markup for performances
 * - Progressive loading for media content
 */

import React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { LazyImage } from '@/components/common/LazySection';
import { useSectionContent } from '@/hooks/useContent';
import { MediaPreview } from '@/components/ui/MediaPreview';
import { fadeInUp, staggerContainer, slideInLeft, slideInRight } from '@/utils/animations';

// Type definitions
type PerformanceTypeFilter = 'all' | 'band' | 'solo' | 'acoustic';
type PerformanceType = 'band' | 'solo' | 'acoustic';
type PreviewType = 'image' | 'audio' | 'video';

// Audio Preview Interface
interface AudioPreview {
  url: string;
  duration: number;
  genre: string[];
  thumbnail?: string;
}

// Portfolio Item Interfaces
interface PortfolioItem {
  id: string;
  src: string;
  alt: string;
  title: string;
  category: string;
  performanceType: PerformanceType;
  genre: string[];
  description: string;
  venue: string;
  eventType: string;
  date?: string;
  aspectRatio: string;
  featured?: boolean;
  audioPreview?: AudioPreview; // New audio preview support
}

interface VideoItem {
  id: string;
  title: string;
  description: string;
  embedUrl: string;
  videoUrl: string;
  thumbnail: string;
  performanceType: PerformanceType;
  genre: string[];
  venue: string;
  duration: number;
}

interface AudioPreviewItem {
  id: string;
  title: string;
  description: string;
  audioUrl: string;
  duration: number;
  genre: string[];
  thumbnail: string;
  performanceType: PerformanceType;
  venue: string;
}

interface TestimonialItem {
  id: string;
  text: string;
  author: string;
  role: string;
  venue?: string;
  performanceType?: PerformanceType;
  featured: boolean;
}

interface PortfolioData {
  title: string;
  subtitle: string;
  description: string;
  bandDescription: string;
  soloDescription: string;
  gallery: PortfolioItem[];
  videos: VideoItem[];
  audioPreviews: AudioPreviewItem[];
  testimonials: TestimonialItem[];
  genres: string[];
  stats: {
    totalPerformances: number;
    venuesPlayed: number;
    yearsActive: number;
  };
}

/**
 * Performance Type Filter Component
 */
const PerformanceTypeFilter: React.FC<{
  activeType: PerformanceTypeFilter;
  onTypeChange: (type: PerformanceTypeFilter) => void;
}> = ({ activeType, onTypeChange }) => {
  const filterOptions = [
    { id: 'all' as const, label: 'All Performances', icon: 'üéµ' },
    { id: 'band' as const, label: 'Band Shows', icon: 'üé∏' },
    { id: 'solo' as const, label: 'Solo Sets', icon: 'üé§' },
    { id: 'acoustic' as const, label: 'Acoustic', icon: 'ü™ï' }
  ];

  return (
    <div className="flex flex-wrap justify-center gap-3 mb-12" role="tablist">
      {filterOptions.map((option) => (
        <button
          key={option.id}
          onClick={() => onTypeChange(option.id)}
          className={`px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 ${
            activeType === option.id
              ? 'bg-brand-blue-primary text-white shadow-lg scale-105'
              : 'bg-gray-100 text-gray-700 hover:bg-brand-blue-light hover:text-brand-blue-primary'
          }`}
          role="tab"
          aria-selected={activeType === option.id}
        >
          <span className="mr-2" role="img" aria-hidden="true">{option.icon}</span>
          {option.label}
        </button>
      ))}
    </div>
  );
};

/**
 * Preview Type Tabs Component
 */
const PreviewTypeTabs: React.FC<{
  activeTab: PreviewType;
  onTabChange: (tab: PreviewType) => void;
}> = ({ activeTab, onTabChange }) => {
  const tabs = [
    { id: 'image' as const, label: 'Performance Gallery', icon: 'üì∏' },
    { id: 'audio' as const, label: 'Audio Previews', icon: 'üéµ' },
    { id: 'video' as const, label: 'Video Highlights', icon: 'üé¨' }
  ];

  return (
    <div className="flex justify-center mb-8">
      <div className="bg-gray-100 p-1 rounded-lg">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => onTabChange(tab.id)}
            className={`px-6 py-2 rounded-md text-sm font-medium transition-all duration-200 ${
              activeTab === tab.id
                ? 'bg-white text-brand-blue-primary shadow-sm'
                : 'text-gray-600 hover:text-brand-blue-primary'
            }`}
          >
            <span className="mr-2" role="img" aria-hidden="true">{tab.icon}</span>
            {tab.label}
          </button>
        ))}
      </div>
    </div>
  );
};

/**
 * Portfolio Item Component with Preview Support
 */
const PortfolioItemCard: React.FC<{
  item: PortfolioItem;
  index: number;
}> = ({ item, index }) => {
  const [showPreview, setShowPreview] = useState(false);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      className="group relative bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300"
    >
      {/* Image Container */}
      <div className="relative overflow-hidden" style={{ aspectRatio: item.aspectRatio }}>
        <LazyImage
          src={item.src}
          alt={item.alt}
          className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
        />
        
        {/* Audio Preview Overlay */}
        {item.audioPreview && (
          <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <div className="absolute bottom-4 left-4 right-4">
              <button
                onClick={() => setShowPreview(!showPreview)}
                className="w-full bg-white/90 backdrop-blur-sm text-gray-900 py-2 px-4 rounded-lg font-medium hover:bg-white transition-colors duration-200 flex items-center justify-center gap-2"
              >
                <span>üéµ</span>
                <span>{showPreview ? 'Hide Preview' : 'Listen Preview'}</span>
              </button>
            </div>
          </div>
        )}

        {/* Performance Type Badge */}
        <div className="absolute top-3 left-3">
          <span className="bg-brand-blue-primary text-white px-3 py-1 rounded-full text-xs font-medium">
            {item.performanceType}
          </span>
        </div>

        {/* Genre Tags */}
        <div className="absolute top-3 right-3 flex flex-wrap gap-1">
          {item.genre.slice(0, 2).map((genre, idx) => (
            <span
              key={idx}
              className="bg-brand-orange-primary text-white px-2 py-1 rounded text-xs"
            >
              {genre}
            </span>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">{item.title}</h3>
        <p className="text-gray-600 text-sm mb-3">{item.description}</p>
        
        <div className="flex items-center justify-between text-xs text-gray-500">
          <span className="flex items-center gap-1">
            <span>üìç</span>
            {item.venue}
          </span>
          <span className="bg-gray-100 px-2 py-1 rounded">
            {item.category}
          </span>
        </div>
      </div>

      {/* Audio Preview Panel */}
      <AnimatePresence>
        {showPreview && item.audioPreview && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="overflow-hidden border-t bg-gray-50"
          >
            <div className="p-4">
              <MediaPreview
                type="audio"
                id={item.id}
                title={`${item.title} - Audio Preview`}
                description="30-second performance sample"
                audioUrl={item.audioPreview.url}
                duration={item.audioPreview.duration}
                genre={item.audioPreview.genre}
                thumbnail={item.audioPreview.thumbnail}
                className="shadow-none bg-transparent"
              />
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

/**
 * Main Performance Gallery Component
 */
export const PerformanceGallery: React.FC = () => {
  const { data: performanceData, loading } = useSectionContent('performance');
  const [activeType, setActiveType] = useState<PerformanceTypeFilter>('all');
  const [activePreviewTab, setActivePreviewTab] = useState<PreviewType>('image');

  const portfolioData: PortfolioData = performanceData?.portfolio || {
    title: 'Performance Portfolio',
    subtitle: 'Loading...',
    description: '',
    bandDescription: '',
    soloDescription: '',
    gallery: [],
    videos: [],
    audioPreviews: [],
    testimonials: [],
    genres: [],
    stats: { totalPerformances: 0, venuesPlayed: 0, yearsActive: 0 }
  };

  // Filter gallery items by performance type
  const filteredGallery = useMemo(() => {
    if (activeType === 'all') {
      return portfolioData.gallery;
    }
    return portfolioData.gallery.filter(item => item.performanceType === activeType);
  }, [portfolioData.gallery, activeType]);

  // Filter video/audio previews by performance type
  const filteredVideos = useMemo(() => {
    if (activeType === 'all') {
      return portfolioData.videos;
    }
    return portfolioData.videos.filter(item => item.performanceType === activeType);
  }, [portfolioData.videos, activeType]);

  const filteredAudioPreviews = useMemo(() => {
    if (activeType === 'all') {
      return portfolioData.audioPreviews;
    }
    return portfolioData.audioPreviews.filter(item => item.performanceType === activeType);
  }, [portfolioData.audioPreviews, activeType]);

  const featuredTestimonials = portfolioData.testimonials.filter(t => t.featured);

  if (loading) {
    return (
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="text-center">
            <div className="w-8 h-8 border-4 border-brand-blue-primary border-t-transparent rounded-full animate-spin mx-auto" />
            <p className="mt-4 text-gray-600">Loading performance portfolio...</p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="py-20 bg-gray-50" id="portfolio">
      <div className="container mx-auto px-4">
        {/* Section Header */}
        <motion.div
          variants={staggerContainer}
          initial="initial"
          whileInView="animate"
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <motion.div variants={fadeInUp} className="mb-8">
            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              {portfolioData.title}
            </h2>
            <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
              {portfolioData.subtitle}
            </p>
          </div>

          {/* Performance Stats */}
          <motion.div variants={fadeInUp} className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
            <div className="text-center">
              <div className="text-3xl font-bold text-brand-blue-primary">{portfolioData.stats.totalPerformances}+</div>
              <div className="text-gray-600 font-medium">Live Performances</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-brand-blue-primary">{portfolioData.stats.venuesPlayed}+</div>
              <div className="text-gray-600 font-medium">Venues Played</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-brand-blue-primary">{portfolioData.stats.yearsActive}</div>
              <div className="text-gray-600 font-medium">Years Active</div>
            </div>
          </motion.div>
        </motion.div>

        {/* Performance Type Filter */}
        <PerformanceTypeFilter
          activeType={activeType}
          onTypeChange={setActiveType}
        />

        {/* Preview Type Tabs */}
        <PreviewTypeTabs
          activeTab={activePreviewTab}
          onTabChange={setActivePreviewTab}
        />

        {/* Content Grid */}
        <AnimatePresence mode="wait">
          {/* Image Gallery */}
          {activePreviewTab === 'image' && (
            <motion.div
              key="gallery"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16"
            >
              {filteredGallery.map((item, index) => (
                <PortfolioItemCard
                  key={item.id}
                  item={item}
                  index={index}
                />
              ))}
            </motion.div>
          )}

          {/* Audio Previews */}
          {activePreviewTab === 'audio' && (
            <motion.div
              key="audio"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-16"
            >
              {filteredAudioPreviews.map((item, index) => (
                <motion.div
                  key={item.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <MediaPreview
                    type="audio"
                    id={item.id}
                    title={item.title}
                    description={item.description}
                    audioUrl={item.audioUrl}
                    duration={item.duration}
                    genre={item.genre}
                    thumbnail={item.thumbnail}
                  />
                </motion.div>
              ))}
            </motion.div>
          )}

          {/* Video Previews */}
          {activePreviewTab === 'video' && (
            <motion.div
              key="video"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-16"
            >
              {filteredVideos.map((item, index) => (
                <motion.div
                  key={item.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <MediaPreview
                    type="video"
                    id={item.id}
                    title={item.title}
                    description={item.description}
                    videoUrl={item.videoUrl}
                    thumbnail={item.thumbnail}
                    duration={item.duration}
                    embedUrl={item.embedUrl}
                  />
                </motion.div>
              ))}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Performance Type Descriptions */}
        <motion.div
          variants={staggerContainer}
          initial="initial"
          whileInView="animate"
          viewport={{ once: true }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16"
        >
          <motion.div variants={slideInLeft} className="bg-white p-8 rounded-lg shadow-lg">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-brand-blue-primary rounded-full flex items-center justify-center text-white text-xl font-bold mr-4">
                üé∏
              </div>
              <h3 className="text-2xl font-semibold text-gray-900">Band Performances</h3>
            </div>
            <p className="text-gray-600 leading-relaxed">
              {portfolioData.bandDescription}
            </p>
          </motion.div>

          <motion.div variants={slideInRight} className="bg-white p-8 rounded-lg shadow-lg">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-brand-orange-primary rounded-full flex items-center justify-center text-white text-xl font-bold mr-4">
                üé§
              </div>
              <h3 className="text-2xl font-semibold text-gray-900">Solo Performances</h3>
            </div>
            <p className="text-gray-600 leading-relaxed">
              {portfolioData.soloDescription}
            </p>
          </motion.div>
        </motion.div>

        {/* Video Section (if available) */}
        {portfolioData.videos.length > 0 && activePreviewTab === 'image' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="mb-16"
          >
            <div className="text-center mb-12">
              <h3 className="text-3xl font-semibold text-gray-900 mb-4">Performance Highlights</h3>
              <p className="text-gray-600 max-w-2xl mx-auto">
                Experience the energy and emotion of live performances through these video previews
              </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {portfolioData.videos.slice(0, 3).map((video) => (
                <MediaPreview
                  key={video.id}
                  type="video"
                  id={video.id}
                  title={video.title}
                  description={video.description}
                  videoUrl={video.videoUrl}
                  thumbnail={video.thumbnail}
                  duration={video.duration}
                  embedUrl={video.embedUrl}
                />
              ))}
            </div>
          </motion.div>
        )}

        {/* Featured Testimonials */}
        {featuredTestimonials.length > 0 && (
          <motion.div
            variants={staggerContainer}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
            className="mb-16"
          >
            <motion.div variants={fadeInUp} className="text-center mb-12">
              <h3 className="text-3xl font-semibold text-gray-900 mb-4">What Clients Say</h3>
              <p className="text-gray-600 max-w-2xl mx-auto">
                Hear from satisfied clients about their performance experiences
              </p>
            </motion.div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {featuredTestimonials.slice(0, 4).map((testimonial, index) => (
                <motion.div
                  key={testimonial.id}
                  variants={fadeInUp}
                  className="bg-white p-8 rounded-lg shadow-lg"
                >
                  <div className="flex items-center mb-4">
                    <div className="text-4xl text-brand-orange-primary mb-2">‚ùù</div>
                  </div>
                  <p className="text-gray-700 italic mb-6 leading-relaxed">
                    {testimonial.text}
                  </p>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-semibold text-gray-900">{testimonial.author}</div>
                      <div className="text-sm text-gray-600">{testimonial.role}</div>
                      {testimonial.venue && (
                        <div className="text-xs text-gray-500">{testimonial.venue}</div>
                      )}
                    </div>
                    <div className="flex items-center">
                      {[...Array(5)].map((_, i) => (
                        <span key={i} className="text-yellow-400 text-sm">‚≠ê</span>
                      ))}
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        {/* Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center bg-gradient-to-r from-brand-blue-primary to-brand-orange-primary text-white p-12 rounded-2xl"
        >
          <h3 className="text-3xl font-bold mb-4">Ready to Book Your Performance?</h3>
          <p className="text-xl mb-8 opacity-90">
            Let's create memorable musical experiences for your event or venue
          </p>
          <a
            href="#contact"
            className="inline-block bg-white text-brand-blue-primary px-8 py-4 rounded-full font-semibold hover:bg-gray-100 transition-colors duration-200 shadow-lg"
          >
            Get Your Quote Today
          </a>
        </motion.div>
      </div>
    </section>
  );
};

export default PerformanceGallery;