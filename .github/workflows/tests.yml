name: Comprehensive Test Suite

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig*.json'
      - '.github/workflows/**'
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig*.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      test_categories:
        description: 'Test categories to run (comma-separated: unit,integration,e2e,performance,a11y)'
        required: false
        default: 'unit,integration'
        type: string
      skip_cache:
        description: 'Skip cache for fresh run'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: write

jobs:
  # Job to detect which test categories need to run
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      run-unit: ${{ steps.changes.outputs.run-unit }}
      run-integration: ${{ steps.changes.outputs.run-integration }}
      run-e2e: ${{ steps.changes.outputs.run-e2e }}
      run-performance: ${{ steps.changes.outputs.run-performance }}
      run-a11y: ${{ steps.changes.outputs.run-a11y }}
      changed-files: ${{ steps.changes.outputs.changed-files }}
      skip-tests: ${{ steps.changes.outputs.skip-tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes and determine test strategy
        id: changes
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check if we should skip all tests (docs-only changes)
          if echo "$CHANGED_FILES" | grep -E '\.(md|txt)$' > /dev/null && ! echo "$CHANGED_FILES" | grep -v -E '\.(md|txt)$' > /dev/null; then
            echo "skip-tests=true" >> $GITHUB_OUTPUT
            echo "run-unit=false" >> $GITHUB_OUTPUT
            echo "run-integration=false" >> $GITHUB_OUTPUT
            echo "run-e2e=false" >> $GITHUB_OUTPUT
            echo "run-performance=false" >> $GITHUB_OUTPUT
            echo "run-a11y=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Default to false, enable based on changes or manual input
          RUN_UNIT=false
          RUN_INTEGRATION=false
          RUN_E2E=false
          RUN_PERFORMANCE=false
          RUN_A11Y=false
          
          # Manual workflow dispatch overrides
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            CATEGORIES="${{ github.event.inputs.test_categories }}"
            if [[ "$CATEGORIES" == *"unit"* ]]; then RUN_UNIT=true; fi
            if [[ "$CATEGORIES" == *"integration"* ]]; then RUN_INTEGRATION=true; fi
            if [[ "$CATEGORIES" == *"e2e"* ]]; then RUN_E2E=true; fi
            if [[ "$CATEGORIES" == *"performance"* ]]; then RUN_PERFORMANCE=true; fi
            if [[ "$CATEGORIES" == *"a11y"* ]]; then RUN_A11Y=true; fi
          else
            # Auto-detect based on changed files
            
            # Unit tests for source code changes
            if echo "$CHANGED_FILES" | grep -E '^src/.*\.(ts|tsx|js|jsx)$' > /dev/null; then
              RUN_UNIT=true
            fi
            
            # Integration tests for component/hook changes
            if echo "$CHANGED_FILES" | grep -E '^src/(components|hooks|utils)/' > /dev/null; then
              RUN_INTEGRATION=true
            fi
            
            # E2E tests for pages, routing, or critical components
            if echo "$CHANGED_FILES" | grep -E '^src/(pages|components/.*\.(tsx|ts))$' > /dev/null || \
               echo "$CHANGED_FILES" | grep -E '^(index\.html|vite\.config\.ts)$' > /dev/null; then
              RUN_E2E=true
            fi
            
            # Performance tests for performance-critical changes
            if echo "$CHANGED_FILES" | grep -E '^src/(components|hooks)/' > /dev/null || \
               echo "$CHANGED_FILES" | grep -E '^(vite\.config\.ts|package\.json)$' > /dev/null; then
              RUN_PERFORMANCE=true
            fi
            
            # A11y tests for UI component changes
            if echo "$CHANGED_FILES" | grep -E '^src/components/' > /dev/null; then
              RUN_A11Y=true
            fi
            
            # Always run on main branch pushes
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              RUN_UNIT=true
              RUN_INTEGRATION=true
              RUN_E2E=true
              RUN_PERFORMANCE=true
              RUN_A11Y=true
            fi
          fi
          
          echo "skip-tests=false" >> $GITHUB_OUTPUT
          echo "run-unit=$RUN_UNIT" >> $GITHUB_OUTPUT
          echo "run-integration=$RUN_INTEGRATION" >> $GITHUB_OUTPUT
          echo "run-e2e=$RUN_E2E" >> $GITHUB_OUTPUT
          echo "run-performance=$RUN_PERFORMANCE" >> $GITHUB_OUTPUT
          echo "run-a11y=$RUN_A11Y" >> $GITHUB_OUTPUT
          
          echo "Test execution plan:"
          echo "- Unit tests: $RUN_UNIT"
          echo "- Integration tests: $RUN_INTEGRATION"
          echo "- E2E tests: $RUN_E2E"
          echo "- Performance tests: $RUN_PERFORMANCE"
          echo "- A11y tests: $RUN_A11Y"

  # Unit Tests - Fast feedback for logic changes
  unit-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-tests == 'false' && needs.detect-changes.outputs.run-unit == 'true'
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-node-modules-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-node-modules-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit tests with coverage
        run: npm run test:coverage -- --run --reporter=verbose

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-unit-node${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Integration Tests - Component integration validation
  integration-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-tests == 'false' && needs.detect-changes.outputs.run-integration == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Restore node_modules cache
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-node-modules-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Build project
        run: npm run build

      - name: Run integration tests
        run: npm run test -- --run --reporter=verbose tests/integration/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration
          path: test-results/
          retention-days: 7

  # E2E Tests - Full user workflow validation
  e2e-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-tests == 'false' && needs.detect-changes.outputs.run-e2e == 'true'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Restore node_modules cache
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-node-modules-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: ~/.cache/ms-playwright
          key: ${{ env.CACHE_VERSION }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-playwright-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build project
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Performance Tests - Performance regression prevention
  performance-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-tests == 'false' && needs.detect-changes.outputs.run-performance == 'true'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Restore node_modules cache
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-node-modules-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Build project
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance

      - name: Run bundle analysis
        run: npm run bundle:size

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            lighthouse-reports/
          retention-days: 14

  # A11y Tests - Accessibility compliance checking
  a11y-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-tests == 'false' && needs.detect-changes.outputs.run-a11y == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Restore node_modules cache
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-node-modules-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        if: github.event.inputs.skip_cache != 'true'
        with:
          path: ~/.cache/ms-playwright
          key: ${{ env.CACHE_VERSION }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build project
        run: npm run build

      - name: Run accessibility tests
        run: npm run test -- --run tests/a11y/

      - name: Upload A11y test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: a11y-test-results
          path: test-results/
          retention-days: 7

  # Collect and publish test results
  publish-results:
    runs-on: ubuntu-latest
    needs: [detect-changes, unit-tests, integration-tests, e2e-tests, performance-tests, a11y-tests]
    if: always() && needs.detect-changes.outputs.skip-tests == 'false'
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Collect test results
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          
          # Unit test results
          if [ -d "test-artifacts/coverage-unit-node20" ]; then
            echo "## Unit Tests ✅" >> test-summary.md
            echo "Coverage reports available in artifacts" >> test-summary.md
            echo "" >> test-summary.md
          fi
          
          # Integration test results
          if [ -d "test-artifacts/test-results-integration" ]; then
            echo "## Integration Tests ✅" >> test-summary.md
            echo "Integration tests completed successfully" >> test-summary.md
            echo "" >> test-summary.md
          fi
          
          # E2E test results
          if [ -d "test-artifacts/e2e-test-results" ]; then
            echo "## E2E Tests ✅" >> test-summary.md
            echo "End-to-end tests completed successfully" >> test-summary.md
            echo "" >> test-summary.md
          fi
          
          # Performance test results
          if [ -d "test-artifacts/performance-test-results" ]; then
            echo "## Performance Tests ✅" >> test-summary.md
            echo "Performance tests completed successfully" >> test-summary.md
            echo "" >> test-summary.md
          fi
          
          # A11y test results
          if [ -d "test-artifacts/a11y-test-results" ]; then
            echo "## Accessibility Tests ✅" >> test-summary.md
            echo "Accessibility tests completed successfully" >> test-summary.md
            echo "" >> test-summary.md
          fi
          
          echo "## Changed Files" >> test-summary.md
          echo '```' >> test-summary.md
          echo "${{ needs.detect-changes.outputs.changed-files }}" >> test-summary.md
          echo '```' >> test-summary.md

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-results
          path: |
            test-artifacts/
            test-summary.md
          retention-days: 30

  # Status check for required tests
  test-status:
    runs-on: ubuntu-latest
    needs: [detect-changes, unit-tests, integration-tests, e2e-tests, performance-tests, a11y-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Test execution summary:"
          echo "- Skip tests: ${{ needs.detect-changes.outputs.skip-tests }}"
          echo "- Unit tests needed: ${{ needs.detect-changes.outputs.run-unit }}"
          echo "- Integration tests needed: ${{ needs.detect-changes.outputs.run-integration }}"
          echo "- E2E tests needed: ${{ needs.detect-changes.outputs.run-e2e }}"
          echo "- Performance tests needed: ${{ needs.detect-changes.outputs.run-performance }}"
          echo "- A11y tests needed: ${{ needs.detect-changes.outputs.run-a11y }}"
          
          # Check if any required tests failed
          UNIT_STATUS="${{ needs.unit-tests.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
          E2E_STATUS="${{ needs.e2e-tests.result }}"
          
          echo "Test results:"
          echo "- Unit tests: $UNIT_STATUS"
          echo "- Integration tests: $INTEGRATION_STATUS"
          echo "- E2E tests: $E2E_STATUS"
          echo "- Performance tests: ${{ needs.performance-tests.result }}"
          echo "- A11y tests: ${{ needs.a11y-tests.result }}"
          
          # Fail if any required test failed
          if [[ "${{ needs.detect-changes.outputs.run-unit }}" == "true" && "$UNIT_STATUS" == "failure" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.detect-changes.outputs.run-integration }}" == "true" && "$INTEGRATION_STATUS" == "failure" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.detect-changes.outputs.run-e2e }}" == "true" && "$E2E_STATUS" == "failure" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          
          echo "✅ All required tests passed or were skipped appropriately"